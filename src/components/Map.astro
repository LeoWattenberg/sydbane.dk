---
// Map.astro - Leaflet map component loading custom GeoJSON
import customData from './map/customData.geo.json';
// Center roughly adjusted to Sønderborg–Gråsten corridor
const center = [54.914, 9.70];
const zoom = 11; // Closer view on the highlighted line
const autoFit = true; // Fit to highlighted line if present
---
<style>
  .map-wrapper { position: relative; }
  #leaflet-map { height: 420px; width: 100%; border-radius: 8px; overflow: hidden; }
  .leaflet-container { font: inherit; }
  .legend { position:absolute; bottom:8px; right:8px; background:rgba(255,255,255,0.92); padding:6px 10px; font-size:12px; border-radius:4px; box-shadow:0 1px 3px rgba(0,0,0,0.2); }
  .legend-row { display:flex; align-items:center; gap:6px; margin:2px 0; }
  .swatch-line { width:26px; height:4px; background:linear-gradient(90deg,#ff8c37,#ffb347); border-radius:2px; }
  .swatch-station { width:10px; height:10px; background:#ff4d5a; border:1px solid #b3212e; border-radius:50%; }
</style>
<div class="map-wrapper">
  <div id="leaflet-map" data-center={JSON.stringify(center)} data-zoom={zoom} data-autofit={autoFit} data-geojson={JSON.stringify(customData)}></div>
  <div class="legend" aria-label="Map legend">
    <div class="legend-row"><div class="swatch-line"></div>Highlighted rail (Sønderborg–Gråsten)</div>
    <div class="legend-row"><div class="swatch-station"></div>Station</div>
  </div>
</div>
<script>
  import 'leaflet/dist/leaflet.css';
  import L from 'leaflet';

  const el = document.getElementById('leaflet-map');
  if (el) {
    const center = el.dataset.center ? JSON.parse(el.dataset.center) : [0,0];
    const zoom = el.dataset.zoom ? parseInt(el.dataset.zoom, 10) : 10;
    const geojson = el.dataset.geojson ? JSON.parse(el.dataset.geojson) : { type: 'FeatureCollection', features: [] };
    const autoFit = el.dataset.autofit === 'true';

    const map = L.map(el).setView(center, zoom);
    L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
      attribution: '&copy; OpenStreetMap contributors &copy; CARTO',
      subdomains: 'abcd',
      maxZoom: 20
    }).addTo(map);

    function featureStyle(feature) {
      const p = feature.properties || {};
      if (p.route === 'sonderborg-graasten') {
        return {
          color: '#ff8c37',
          weight: 6,
          opacity: 0.95,
          lineCap: 'round'
        };
      }
      if (p.kind === 'rail') {
        return { color: '#888', weight: 3, opacity: 0.7 };
      }
      return { color: '#4e54c8', weight: 2, opacity: 0.6, fillOpacity: 0.25 };
    }

    const railLineLayers = [];

    const layer = L.geoJSON(geojson, {
      style: featureStyle,
      pointToLayer: (feature, latlng) => {
        if (feature.properties?.kind === 'station') {
            const largeStations = new Set(['Flensburg','Padborg','Tinglev','Tønder', 'Rødekro','Kliplev','Gråsten','Sønderborg St.','Sønderborg']);
            const name = feature.properties?.name || '';
            const radius = largeStations.has(name) ? 9 : 6;
            const color = largeStations.has(name) ? '#ff4d5a' : '#666';
            return L.circleMarker(latlng, {
              radius,
              fillColor: color,
              color: '#b3212e',
              weight: 1,
              opacity: 1,
              fillOpacity: 1
            });
        }
        return L.circleMarker(latlng, { radius:4, fillColor:'#666', color:'#333', weight:1, opacity:0.8, fillOpacity:0.8 });
      },
      onEachFeature: (feature, lyr) => {
        if (feature.properties?.name) {
          lyr.bindPopup(`<strong>${feature.properties.name}</strong><br/>${feature.properties.description || ''}`);
        }
        if (feature.properties?.route === 'sonderborg-graasten') {
          railLineLayers.push(lyr);
          lyr.on('mouseover', () => lyr.setStyle({ weight: 8 }));
          lyr.on('mouseout', () => lyr.setStyle(featureStyle(feature)));
        }
      }
    }).addTo(map);

    if (autoFit) {
      const target = railLineLayers.length ? railLineLayers : layer.getLayers();
      if (target.length) {
        const group = L.featureGroup(target);
        map.fitBounds(group.getBounds(), { padding: [25, 25] });
      }
    }
  }
</script>
